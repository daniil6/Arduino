#include <stdio.h>
#include <stdlib.h>
#include <string>

#include "rsaes_pkcs1v15.h"

uint8_t keys_allocated = 0;
rsa_publickey_t pub_key;
rsa_privatekey_t priv_key;

#ifdef GCC
#define PGM_VOID_P const void*
#endif // GCC

#define BIGINT_CEIL(x) ((((x) + sizeof(bigint_word_t) - 1) / sizeof(bigint_word_t)) * sizeof(bigint_word_t))
#define BIGINT_OFF(x) ((sizeof(bigint_word_t) - (x) % sizeof(bigint_word_t)) % sizeof(bigint_word_t))

const uint8_t PUB_EXPONENT[] = { 0x01, 0x00, 0x01 };

const uint8_t MODULUS[] = { 0xa8, 0xb3, 0xb2, 0x84, 0xaf, 0x8e, 0xb5, 0x0b, 0x38, 0x70, 0x34, 0xa8, 0x60, 0xf1, 0x46,
    0xc4, 0x91, 0x9f, 0x31, 0x87, 0x63, 0xcd, 0x6c, 0x55, 0x98, 0xc8, 0xae, 0x48, 0x11, 0xa1, 0xe0, 0xab, 0xc4, 0xc7,
    0xe0, 0xb0, 0x82, 0xd6, 0x93, 0xa5, 0xe7, 0xfc, 0xed, 0x67, 0x5c, 0xf4, 0x66, 0x85, 0x12, 0x77, 0x2c, 0x0c, 0xbc,
    0x64, 0xa7, 0x42, 0xc6, 0xc6, 0x30, 0xf5, 0x33, 0xc8, 0xcc, 0x72, 0xf6, 0x2a, 0xe8, 0x33, 0xc4, 0x0b, 0xf2, 0x58,
    0x42, 0xe9, 0x84, 0xbb, 0x78, 0xbd, 0xbf, 0x97, 0xc0, 0x10, 0x7d, 0x55, 0xbd, 0xb6, 0x62, 0xf5, 0xc4, 0xe0, 0xfa,
    0xb9, 0x84, 0x5c, 0xb5, 0x14, 0x8e, 0xf7, 0x39, 0x2d, 0xd3, 0xaa, 0xff, 0x93, 0xae, 0x1e, 0x6b, 0x66, 0x7b, 0xb3,
    0xd4, 0x24, 0x76, 0x16, 0xd4, 0xf5, 0xba, 0x10, 0xd4, 0xcf, 0xd2, 0x26, 0xde, 0x88, 0xd3, 0x9f, 0x16, 0xfb };

const uint8_t MSG[] = { 0x66, 0x28, 0x19, 0x4e, 0x12, 0x07, 0x3d, 0xb0, 0x3b, 0xa9, 0x4c, 0xda, 0x9e, 0xf9, 0x53, 0x23,
    0x97, 0xd5, 0x0d, 0xba, 0x79, 0xb9, 0x87, 0x00, 0x4a, 0xfe, 0xfe, 0x34 };

const uint8_t SEED[] = { 0x01, 0x73, 0x41, 0xae, 0x38, 0x75, 0xd5, 0xf8, 0x71, 0x01, 0xf8, 0xcc, 0x4f, 0xa9, 0xb9, 0xbc,
    0x15, 0x6b, 0xb0, 0x46, 0x28, 0xfc, 0xcd, 0xb2, 0xf4, 0xf1, 0x1e, 0x90, 0x5b, 0xd3, 0xa1, 0x55, 0xd3, 0x76, 0xf5,
    0x93, 0xbd, 0x73, 0x04, 0x21, 0x08, 0x74, 0xeb, 0xa0, 0x8a, 0x5e, 0x22, 0xbc, 0xcc, 0xb4, 0xc9, 0xd3, 0x88, 0x2a,
    0x93, 0xa5, 0x4d, 0xb0, 0x22, 0xf5, 0x03, 0xd1, 0x63, 0x38, 0xb6, 0xb7, 0xce, 0x16, 0xdc, 0x7f, 0x4b, 0xbf, 0x9a,
    0x96, 0xb5, 0x97, 0x72, 0xd6, 0x60, 0x6e, 0x97, 0x47, 0xc7, 0x64, 0x9b, 0xf9, 0xe0, 0x83, 0xdb, 0x98, 0x18, 0x84,
    0xa9, 0x54, 0xab, 0x3c, 0x6f };

// ------------------------------------------------------------------------

/* Prime 1: */
const uint8_t P[] = { 0xd3, 0x27, 0x37, 0xe7, 0x26, 0x7f, 0xfe, 0x13, 0x41, 0xb2, 0xd5, 0xc0, 0xd1, 0x50, 0xa8, 0x1b,
    0x58, 0x6f, 0xb3, 0x13, 0x2b, 0xed, 0x2f, 0x8d, 0x52, 0x62, 0x86, 0x4a, 0x9c, 0xb9, 0xf3, 0x0a, 0xf3, 0x8b, 0xe4,
    0x48, 0x59, 0x8d, 0x41, 0x3a, 0x17, 0x2e, 0xfb, 0x80, 0x2c, 0x21, 0xac, 0xf1, 0xc1, 0x1c, 0x52, 0x0c, 0x2f, 0x26,
    0xa4, 0x71, 0xdc, 0xad, 0x21, 0x2e, 0xac, 0x7c, 0xa3, 0x9d };

/* Prime 2: */
const uint8_t Q[] = { 0xcc, 0x88, 0x53, 0xd1, 0xd5, 0x4d, 0xa6, 0x30, 0xfa, 0xc0, 0x04, 0xf4, 0x71, 0xf2, 0x81, 0xc7,
    0xb8, 0x98, 0x2d, 0x82, 0x24, 0xa4, 0x90, 0xed, 0xbe, 0xb3, 0x3d, 0x3e, 0x3d, 0x5c, 0xc9, 0x3c, 0x47, 0x65, 0x70,
    0x3d, 0x1d, 0xd7, 0x91, 0x64, 0x2f, 0x1f, 0x11, 0x6a, 0x0d, 0xd8, 0x52, 0xbe, 0x24, 0x19, 0xb2, 0xaf, 0x72, 0xbf,
    0xe9, 0xa0, 0x30, 0xe8, 0x60, 0xb0, 0x28, 0x8b, 0x5d, 0x77 };

/* Prime exponent 1: */
const uint8_t DP[] = { 0x0e, 0x12, 0xbf, 0x17, 0x18, 0xe9, 0xce, 0xf5, 0x59, 0x9b, 0xa1, 0xc3, 0x88, 0x2f, 0xe8, 0x04,
    0x6a, 0x90, 0x87, 0x4e, 0xef, 0xce, 0x8f, 0x2c, 0xcc, 0x20, 0xe4, 0xf2, 0x74, 0x1f, 0xb0, 0xa3, 0x3a, 0x38, 0x48,
    0xae, 0xc9, 0xc9, 0x30, 0x5f, 0xbe, 0xcb, 0xd2, 0xd7, 0x68, 0x19, 0x96, 0x7d, 0x46, 0x71, 0xac, 0xc6, 0x43, 0x1e,
    0x40, 0x37, 0x96, 0x8d, 0xb3, 0x78, 0x78, 0xe6, 0x95, 0xc1 };

/* Prime exponent 2: */
const uint8_t DQ[] = { 0x95, 0x29, 0x7b, 0x0f, 0x95, 0xa2, 0xfa, 0x67, 0xd0, 0x07, 0x07, 0xd6, 0x09, 0xdf, 0xd4, 0xfc,
    0x05, 0xc8, 0x9d, 0xaf, 0xc2, 0xef, 0x6d, 0x6e, 0xa5, 0x5b, 0xec, 0x77, 0x1e, 0xa3, 0x33, 0x73, 0x4d, 0x92, 0x51,
    0xe7, 0x90, 0x82, 0xec, 0xda, 0x86, 0x6e, 0xfe, 0xf1, 0x3c, 0x45, 0x9e, 0x1a, 0x63, 0x13, 0x86, 0xb7, 0xe3, 0x54,
    0xc8, 0x99, 0xf5, 0xf1, 0x12, 0xca, 0x85, 0xd7, 0x15, 0x83 };

/* Coefficient: */
const uint8_t QINV[] = { 0x4f, 0x45, 0x6c, 0x50, 0x24, 0x93, 0xbd, 0xc0, 0xed, 0x2a, 0xb7, 0x56, 0xa3, 0xa6, 0xed, 0x4d,
    0x67, 0x35, 0x2a, 0x69, 0x7d, 0x42, 0x16, 0xe9, 0x32, 0x12, 0xb1, 0x27, 0xa6, 0x3d, 0x54, 0x11, 0xce, 0x6f, 0xa9,
    0x8d, 0x5d, 0xbe, 0xfd, 0x73, 0x26, 0x3e, 0x37, 0x28, 0x14, 0x27, 0x43, 0x81, 0x81, 0x66, 0xed, 0x7d, 0xd6, 0x36,
    0x87, 0xdd, 0x2a, 0x8c, 0xa1, 0xd2, 0xf4, 0xfb, 0xd8, 0xe1 };

const uint8_t sss[128] = { 0x6f, 0x09, 0xfd, 0x7f, 0x92, 0xf5, 0x96, 0x94, 0x3b, 0x05, 0x59, 0xf2, 0x46, 0xbb, 0x49,
    0x87, 0xdc, 0x1d, 0xe4, 0xd1, 0xa4, 0xce, 0x0d, 0x52, 0x7e, 0x77, 0xf9, 0x82, 0xbf, 0x62, 0x97, 0xa0, 0xbf, 0x53,
    0xe8, 0x73, 0x2a, 0x90, 0xe7, 0x7f, 0x9d, 0x04, 0x3d, 0x9a, 0x58, 0x8a, 0xe5, 0xd9, 0x97, 0x77, 0x81, 0xee, 0x9e,
    0xb1, 0x49, 0x8c, 0xbf, 0xa2, 0xf9, 0x77, 0xde, 0xf5, 0x8d, 0xec, 0x1c, 0xfe, 0x45, 0xf5, 0x7e, 0x3a, 0x50, 0xff,
    0x69, 0xaa, 0x40, 0xd3, 0x18, 0x2f, 0xd1, 0x48, 0xbe, 0xbb, 0x60, 0xee, 0x77, 0xb1, 0xdc, 0xe9, 0x87, 0xed, 0xa6,
    0xca, 0x78, 0x31, 0x13, 0x3a, 0x13, 0xdb, 0xce, 0x7d, 0x01, 0xac, 0x00, 0x81, 0xae, 0x2e, 0xb1, 0x8a, 0xf1, 0xac,
    0x54, 0xc0, 0x8d, 0x95, 0x73, 0x14, 0xf1, 0x2f, 0xb1, 0xf5, 0xef, 0x5c, 0xdb, 0x61, 0x63, 0xfe, 0x28, 0xf6 };

uint8_t load_bigint_from_os(bigint_t* a, PGM_VOID_P os, uint16_t length_B)
{
    a->length_W = BIGINT_CEIL(length_B) / sizeof(bigint_word_t);
    a->wordv = (bigint_word_t*)malloc(BIGINT_CEIL(length_B));
    if(!a->wordv) {
        printf("\r\nOOM!\r\n");
        return 1;
    }

    memset(a->wordv, 0, sizeof(bigint_word_t));
    memcpy((uint8_t*)a->wordv + BIGINT_OFF(length_B), os, length_B);
    a->info = 0;
    bigint_changeendianess(a);
    bigint_adjust(a);
    return 0;
}

uint8_t pre_alloc_key_crt(void)
{
    priv_key.n = 5;
    priv_key.components = (bigint_t*)malloc(5 * sizeof(bigint_t));
    if(!priv_key.components) {
        printf("\r\nERROR: OOM!");
        return 2;
    }
    return 0;
}

void free_key(void)
{
    uint8_t c = 0;
    free(pub_key.modulus.wordv);
    free(pub_key.exponent.wordv);
    for(c = 0; c < priv_key.n; ++c) {
        free(priv_key.components[c].wordv);
    }
    free(priv_key.components);
    keys_allocated = 0;
}

void load_fix_rsa(void)
{
    if(keys_allocated) {
        free_key();
    }

    keys_allocated = 1;

    if(pre_alloc_key_crt()) {
        printf("\r\nOOM!\r\n");
        return;
    }

    load_bigint_from_os(&pub_key.modulus, MODULUS, sizeof(MODULUS));
    memcpy(&priv_key.modulus, &pub_key.modulus, sizeof(bigint_t));
    load_bigint_from_os(&pub_key.exponent, PUB_EXPONENT, sizeof(PUB_EXPONENT));
    priv_key.n = 5;
    load_bigint_from_os(&(priv_key.components[0]), P, sizeof(P));
    load_bigint_from_os(&(priv_key.components[1]), Q, sizeof(Q));
    load_bigint_from_os(&(priv_key.components[2]), DP, sizeof(DP));
    load_bigint_from_os(&(priv_key.components[3]), DQ, sizeof(DQ));
    load_bigint_from_os(&(priv_key.components[4]), QINV, sizeof(QINV));
}

void Sample()
{
    uint8_t ciphertext[128] = { 0 };
    uint8_t plaintext_in[128] = { 0 };
    uint8_t plaintext_out[128] = { 0 };
    uint8_t rc = 0;
    uint16_t clen = 0;
    uint16_t plen = 0;
    uint8_t seed[sizeof(SEED)] = { 0 };
    uint8_t seed_out[sizeof(SEED)] = { 0 };

    if(!keys_allocated)
        load_fix_rsa();

#if 1
    clen = bigint_length_B(&pub_key.modulus);
    memcpy(seed, SEED, sizeof(SEED));
    memcpy(plaintext_in, "Hello world!", 12);
    rc = rsa_encrypt_pkcs1v15(ciphertext, &clen, plaintext_in, sizeof(MSG), &pub_key, seed);
#else
    memcpy(ciphertext, sss, 128);
    clen = 128;
#endif
    rc = rsa_decrypt_pkcs1v15(plaintext_out, &plen, ciphertext, clen, &priv_key, seed_out);
}

int main(int argc, char** argv)
{
    Sample();
    return 0;
}
